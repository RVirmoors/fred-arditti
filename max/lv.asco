; F.P. - lvbeet

//@insert lvMacros.asco
//@insert lvSpat.asco

;@fun_def @note2hz($note) {
;	@midicent2hz(@symb2midicent($note))
;} 

// freq-amp-decayrate triplets for use with [resonators]
@macro_def @oddHarms($root, $amp) {$root $amp @rand_int(50) ($root * 3) $amp @rand_int(20) ($root * 5) ($amp * 1.2) @rand_int(10) ($root * 7) ($amp * 1.3) @rand_int(20); ($root * 9) 0.53 @rand_int(13) ($root * 11) 0.6 @rand_int(25) ($root * 13) 0.8 @rand_int(18) ($root * 15) 0.9 @rand_int(31) ($root * 17) 0.95 @rand_int(20) ($root * 19) 1 @rand_int(50)
}

// root, interval, amp -> triplets for [resonators]
@fun_def @grillHarms($root, $i, $amp) {
	$t := [ $x | $x in $root+$i .. ($root*2+1) : $i ]
	$output := $root + " " + $amp + " " + 10
	forall $freq in $t 
	{
		$output := $output + " " + $freq + " " + $amp * (@rand(0.5)+0.5) + " " + @rand_int(10)
	}
    return $output
}

@macro_def @simpleCurve($receiver, $from, $to, $within) {
	 curve sC 
	     @action := { $receiver $asc },
	     @grain := 0.1
	     {
	            $asc
	            {
	                   { $from } @type "linear"
	                 $within { $to } @type "linear"
	            }
	     }
} 

@macro_def @start {
	spat room 1 reverberance 90, room 1 air 1, room 1 size 666
	repel 1 0, 2 0, 3 0	; spat repel off
	1-out off
	2-outL off
	2-outR off
	3-outL off
	3-outR off
	//1-gain 0
	//2-gain 0
	//3-gain 0
	getfreq 0
	gran off
	granXtime 50
	gmirror dry -70, grains_on_off 0
	1-partials off
	1-partialsXtime 100
	1-teeth off
	1-teethXtime 100
	1-tw 0.58 164.83 1. 0.38 0.15 0.37
	1-trans off
	1-transXtime 100
	2-trans off
	2-transXtime 100
	1-cross off
	1-crossXtime 100
	delay off
	delayXtime 500
	dmirror dry -70, grains_on_off 0
	capture off
	captureXtime 50
	mubuffer clearall
	$peaks := 0
	$energy := 0
	$periodicity := 0
	$switch_button := 0
	$fund := 0
	mugran duration 512, durationvar 64, positionvar 512, periodvar 50
	spat room 1 infinite 0
}

@macro_def @resoScreen($in) {
	1-partials $in
	gran 1p 1.5 ;$in
	3-outL g1
	3-outR g2
	1-setpartials @oddHarms(29.14, 0.2) @oddHarms(49, 0.4) @oddHarms(110, 0.8) @oddHarms(130.81, 1) @oddHarms(196, 1) @oddHarms(293.66, 1) @oddHarms(440, 1.1) @oddHarms(659, 1.2) ; Bb0 G1 D2 A2 C3 G3 D4 A4 E5
	gmirror grains_on_off 1
	gmirror lowpass 22000
	gmirror feedbk 0.7, grain_freq 45, scrub_freq 0.5, max_delay 250
}

@macro_def @noiseRec($in) {
	clear buffer
	capture $in
	mugran play 0
	record 1
	playmode 0
}

@macro_def @noiseStop {
	capture off
;	@noiseScreen(off)
	mugran play 0
	abort playLoop
	record 0
	playmode 0
}

@macro_def @noiseScreen($in, $envscale) {
	capture $in
	1-cross c 1 $in
	2-trans 1x 1
	delay 2t 1.5 c 0.2
	2-outL d1
	2-outR d2
	mugran play 1
	playmode 1
	mugran periodvar 50
	record 0
	1-svpcross 0.1 0.9 0.9 0.1
	2-remix 0.15 1 1 0 0.12 ; sin noiz trans relax error
	2-envwarp 205 $envscale
	dmirror grains_on_off 1
	dmirror feedbk 0.5, grain_freq 18, scrub_freq 5, max_delay 50
}

@macro_def @toneScreen($in, $delay) {
	1-trans $in
	1-teeth 1t 1 $in
	1-out 1w
	1-remix 1. 0.015 0.8 0 0.1 ; sin noiz trans relax error
	1-tdel $delay 
	1-envwarp 58.27 1.5
}


@macro_def @loopScreen {
	1-trans c 1
	1-out 1t
	mugran play 1
	playmode 2
	record 0
	1-remix 0.1 0.5 0.8 0 0.5 ; sin noiz trans relax error
	1-envwarp 98 1.5	; G2
}

@macro_def @resoGrill($in, $dry, $wet) {
	1-teeth $in
	whenever ($switch_button) {	; for S == 2
		if ($switch_button != 1) {
			1-teeth $in
		} else {
			0.5 1-teeth off
		}
	}
	gran 1w 1 
	3-outL g1
	3-outR g2
	1-tdel 0.88 ; 0.97
	gmirror grains_on_off 1, dry $dry, wet $wet
	gmirror highpass 293, lowpass 14080
	gmirror grain_freq 128, scrub_freq 75
	getfreq 1
	whenever FFUND ($fund) {
		gmirror max_delay ($fund / 2)
	}
;	@energy_mirror(0.45, 0.75)
}

@macro_def @mirror($in) {
	delay $in
	whenever ($switch_button) {	; for S == 1
		if ($switch_button < 2) {
			delay $in
		} else {
			0.5 delay off
		}
	}
	2-outL d1
	2-outR d2
	dmirror grains_on_off 1
	dmirror feedbk 0.6, grain_freq 30, scrub_freq 0.25, max_delay 333
	dmirror highpass 1760, lowpass 14080		; A6 to A9
	@energy_mirror(0.3, 0.75)
}

@macro_def @energy_mirror($on_thresh, $off_thresh) {
	whenever ENMIR ($periodicity) {
;		mirror max_delay (50 + (1-$energy) * 550)
		if ($periodicity < $on_thresh && $periodicity > 0.1 ) {
			dmirror grains_on_off 1
			gmirror grains_on_off 1
			spat room 1 infinite 0
		}
		if ($periodicity > $off_thresh || $periodicity < 0.001) {
			dmirror grains_on_off 0
			gmirror grains_on_off 0
			spat room 1 infinite 0
		}
	}
}

@macro_def @mirrorOff {	
	@mirror(off)
	abort ENMIR
	abort FFUND
	getfreq 0
	spat room 1 infinite 0
}

@macro_def @doubler($in, $scale, $lowpass) {
	$ff := $fund
	print $ff
	if ($ff  > 1000) {
		$ff := $ff / 16
	}
	if ($ff  < 20) {
		$ff := 298
	}
	1-trans $in
	1-out 1t
	1-remix 0.2 1 0.1 1 1 ; sin noiz trans relax error
	1-lowpass $lowpass
	repel 1 1
;	curve @command {1-envwarp $ff} 1, $scale 10
	@simpleCurve(1-envwarp $ff, 1, $scale, 10)
;	loop DOUB 1 {
;		1-envwarp @round($fund/16) (1.05 + $periodicity)
;	}
}


; TEETH FB DELAY <-> FUNDAMENTAL FREQ
; https://docs.cycling74.com/max7/maxobject/teeth~
;
; 1.03 - 245 (B)
; 1 - 1002 (B+)
; 0.99 - 256 (B-C)
; 0.97 - 525 (C)
; 0.94 - 269 (C+)
; 0.92 - 1102 (C#)
; 0.89 - 283 (D--)
; 0.88 - 580 (D-)
; 0.86 - 298 (D+)
; 0.83 - 1225 (D#-)
; 0.81 - 315 (D#+)
; 0.79 - 648 (E-)
; 0.77 - 334 (E+)
; 0.73 - 1378 (F-)
; 0.71 - 356 (F+)
; 0.70 = 735 (F#)
; 0.67 - 380 (F#-G)
; 0.64 - 1575 (G+)
; 0.62 - 408 (G#-)
; 0.60 - 848 (G#+)
; 0.58 - 441 (A)
; 0.56 - 1837 (A#-)
; 0.53 - 479 (A#-B)
; 0.5 - 1002 (B+)

$a := [-90, 90, 0]
$d := [1, 1, 1]

whenever ($a[0] || $d[0]) {
	spat source 1 aed ($a[0]) 0 ($d[0])
}
whenever ($a[1] || $d[1]) {
	spat source 2 aed ($a[1]) 0 ($d[1])
}
whenever ($a[2] || $d[2]) {
	spat source 3 aed ($a[2]) 0 ($d[2])
}


// dynamic spat processes

@proc_def ::spat_repelAttacks($source) {
	@local $start_d
	$start_d := $d[($source-1)]
	repel $source $start_d
}

@proc_def ::spat_circular($source, $dir) {
	@local $start_a
;	loop circular 0.5 {
;		$start_a := $a[($source-1)]
;		circ $source $start_a $dir
;	}

	loop circular 0.4 {
		$start_a := $a[($source-1)]
		$a[($source-1)] := $start_a + $dir * (1.1 - $periodicity)
		$a := $a
	}
}

@proc_def ::spat_teleport($source) {
	@local $start_a, $start_d, $rand
	$start_d := $d[($source-1)]
	whenever ($BEAT_POS) { // for each new event, teleport
		if (@rand_int(100) < 75) {
			;print teleport $rand
			$start_a := $a[($source-1)]
			$rand := @rand_int(90) * (@rand_int(2) * 2 - 1)
			curve MOVE @Grain := 0.05s, @Action := {
				$a[($source-1)] := $x1; $a[($source-1)] + @rand_int(360)
				$a := $a
			}
			{ $x1 {
					{ $start_a }
				0.5	{ ($start_a + $rand) }
			} }			
		}
	}
}

@proc_def ::spat_radial($source) {
	@local $start_a
	$start_a := $a[($source-1)]
	whenever ($periodicity) {
		spat source $source azim ($start_a + ($periodicity - 0.5) * 15)
	}
}

@proc_def ::spat_circle_walk($source, $per) {
	@local $start_a, $start_d, $period, $random
	$period := $per
	loop CIRC $period {
		kill GOTOC
		$random := @rand_int(60)
		$start_a := $a[($source-1)]
		$start_d := $d[($source-1)]
		curve GOTOC @Grain := 0.05s, @Action := {
			$a[($source-1)] := $x1
			$a := $a
		}
		{ $x1, $x2 {
			{$start_a, $start_d}
			($per/2) {($start_a + $random*6 - 150), $start_d}
		}}
;		$period := $per + (@rand_int(50) / 25)	; TODO put this back in?	
	}

}


@proc_def ::spat_cross($source) {
	@local $start_a, $start_d
	whenever ($switch_button) {
		$start_a := $a[($source-1)]
		$start_d := $d[($source-1)]
		curve GOTO @Grain := 0.05s, @Action := {
			$a[($source-1)] := $x1
			$d[($source-1)] := $x2
			$a := $a
		}
		{ $x1, $x2 {
			{$start_a, $start_d}
			0.5 {($start_a + @rand_int(60) - 30), ($start_d * -1)}
		}}			
	}

}

@proc_def ::spat_spray($source) {
	@local $start_a
	whenever ($periodicity) {
		$start_a := $a[($source-1)]
		curve MOVE @Grain := 0.05s, @Action := {
			$a[($source-1)] := $x1 
			$a := $a
		}
		{
			$x1 {
				{ $start_a }
				1	{ (($periodicity - 0.15) * 1800) }
			}
		}
	}
}

@proc_def ::spat_goto($source, $to_a, $to_d, $time) {
	@local $start_a, $start_d
	$start_a := $a[($source-1)]
	$start_d := $d[($source-1)]
	curve GOTO @Grain := 0.05s, @Action := {
		let $a[($source-1)] := $x1
		let $d[($source-1)] := $x2
		$a := $a
	}
	{ $x1, $x2 {
		{$start_a, $start_d}
		$time {$to_a, $to_d}
	}}	
}

// ---------------------------

antescofo::analysis 4096 512
antescofo::suivi 1
antescofo::pedal 0

BPM 60 ; 1 beat = 1 second

$playing := 0 ; for debugging

@start ; reset initial params

mubuffer readall capture_init.mubu

@resoScreen(vn2 25)	; screen 3


// ======= Part 1 =======


input-gain 55 ; start is very quiet!!!
input-sel 2 ; 1=vn1, 2=vn2, 3=va, 4=cl.

$a := [-90, 90, 0]
$d := [1, 1, 1]

TRILL (C4 D#6) 3	m1
	$spatTone := ::spat_circular(1, 1) ; start spinning screen1
	$spatReso := ::spat_circular(3, -1) ; start spinning screen2
	$spatRepel1 := ::spat_repelAttacks(1)
	$spatRepel3 := ::spat_repelAttacks(3)
	$spatNoise := ::spat_spray(2)

	3 input-sel 4	; CELLO

NOTE F1 5 @fermata ;cl-low 

	@toneScreen(vc 1, 0.73) ; 1-out
	curve 1-gain -30, 0.0	4
	@noiseScreen(vn2 5, 0.9)	; 2-out
	3 @resoScreen(vn2 25)	; reopen
	@noiseStop
	@noiseRec(vc 15)
	2 input-sel 3 ; VA
	@resoScreen(off)

NOTE E3 5 ;va-e3
	@toneScreen(vc 1 va 1.2, 0.77)
	@noiseStop
	0.1 @noiseScreen(vn2 5 vn1 3, 1.1)
	2.9 @resoScreen(vn2 26 vc 20)
	@noiseScreen(vn1 5, 0.9)

NOTE A3 1 ;va-a3
	@toneScreen(vc 1 va 1.2 vn1 5, 0.7)
	@noiseScreen(vn2 1, 1.1)
	input-gain 14

CHORD (-A3 F#3) 2 ;imperc
	@toneScreen(vc 1 va 1.2 vn1 1.2, 0.67)
	@resoScreen(vn2 22 vc 20)
	@noiseStop

NOTE 0 3 @fermata ;silence m4
	@toneScreen(vn2 1.2, 0.58)
	@resoScreen(off)
	2 print in m4...
	@noiseScreen(vn2 1 vc 1, 0.9)

TRILL (A4 G5) 2 ;delic
;	@toneScreen(off, 0)
	@resoScreen(va 1)
	@noiseStop
NOTE G#3 1 ;gsharp
	@noiseScreen(vn2 1, 1.1)
	@resoScreen(vn1 1)
NOTE 0 1 @fermata ;silence
	@noiseStop
TRILL (A3) 2 ;atrill
	@resoScreen(off)
	1.5 print before m6...
	@noiseScreen(vn2 1, 1.05)
	antescofo::suivi 0

CHORD (Ab3 E4) 2 m6	
	antescofo::suivi 1
	@toneScreen(vn1 1 vn2 1 va 1, 0.53)	
	curve 1-gain -30., 0.0	4
	@noiseScreen(vc 1, 0.95)

	2 input-sel 4 ; CL
	@noiseStop
MULTI (C1 F#1) 3 ;cl-gliss
	@resoScreen(vn1 1)
	@toneScreen(vc 1, 0.70)

TRILL (A1) 2 ;m7
	@toneScreen(vc 1 vn1 1, 0.58)

	2 input-sel 1 ; VN1
NOTE 0 1
	@toneScreen(vc 1 va 1, 0.58)
	@resoScreen(vn1 1 vn2 1)
TRILL (F5 G6) 2 ;v1-improv
NOTE -F5 2 ;m8
	input-gain 3
	@resoScreen(vn1 1 va 1)
	@noiseScreen(vc 0.77, 0.85)

	2 input-sel 2 ; VN2
	input-gain 10
TRILL (Eb4 E5) 3 @fermata ;v2-improv
	@toneScreen(vn1 1 vn2 1 va 1, 0.58)
	1 print inside m8...
	@resoScreen(off)

	antescofo::suivi 0

NOTE 0 1/2 m9
	antescofo::suivi 1
	abort $spatTone
	abort $spatReso
	$a[0] := 15
	$d[0] := 0.2
	$a[2] := -15
	$d[2] := 0.2
	$a := $a
	@resoScreen(vn1 1 vn2 1)
	1-gain 0
	@toneScreen(vc 1, 0.58)

	input-sel 4 ; CL
	input-gain 1
NOTE F1 1/2 @pizz ;cpizz1
NOTE 0 1/2
	1-gain -0.5
NOTE F1 1/2 @pizz ;cpizz2
NOTE 0 1/2 
	1-gain 0
NOTE F1 1/2 @pizz ;cpizz3
NOTE 0 1/2 
	1-gain 0.5
NOTE F1 1/2 @pizz ;cpizz4
NOTE 0 1/2 
	1-gain 0
	@toneScreen(vc 1 va 1, 0.58)
	1-cross c 1 vc 1
NOTE F1 1/2 @pizz ;cpizz5

1/3 curve scofoInput @Grain := 0.05s, @Action := {input-gain $x}
	{ $x {
			{ 5. }
		2	{ 2. }
	}}
	@resoScreen(vn1 1.5 vc 1)

MULTI ((F1 G1) -> (C1 G1)) 2 ;m10
	@noiseScreen(va 1 vn2 0.5, 1.05)
	1-cross c 1 vc 1
	@toneScreen(vn2 2, 0.81)
	;curve 1-gain -30, 0.0	1.5
NOTE C1 1	;down
NOTE F3 1	;up

	input-sel 3 ; VA	
	abort $spatRepel1
	abort $spatRepel3
	repel 1 0, 3 0
	$d[2] := 1
	::spat_goto(1, 45, 1.5, 10)
	::spat_goto(3, 180, 1, 7)
	$spatReso := ::spat_radial(3)

NOTE 0 3/5
NOTE F2 2/5 @pizz ;vpizz1
NOTE 0 1/5 ;m11
NOTE F2 2/5 @pizz ;vpizz2
	1-cross c 1 vn2 1
NOTE 0 2/5
NOTE F2 2/5 @pizz ;vpizz3
	@resoScreen(vn1 1 vn2 1)
NOTE 0 1/5
NOTE F2 2/5 @pizz ;vpizz4
NOTE 0 1/5
NOTE F2 2/5 @pizz ;vpizz5
NOTE 0 2/5
	@noiseScreen(vc 1 va 1, 0.9)

	input-sel 1 ; VN1
CHORD (F#5 G5) 1 ;vn1
NOTE F4 3 ;m12
	::spat_goto(1, -60, 4.5, 10)

NOTE G6 1 ;FL
NOTE F#5 1/2 ;fs
NOTE G5 1/2 ;g 
NOTE G6 1 ;g_hi

NOTE D6 1 ;m13
	@toneScreen(vn2 2 vc 0.7, 0.97)
	@noiseStop
	abort $spatNoise
CHORD (F#6 D#7) 4 ;TA
	@toneScreen(vn1 1 vn2 2 va 1 vc 1, 0.97)

	input-sel 1 ; vn1
	input-gain 1
	antescofo::suivi 0
	@mirrorOff

NOTE D5 1/6	m14-r
	abort $spatReso
	antescofo::suivi 1
	spat room 1 reverberance 65 ; reduce reverb, tighter sound
	@toneScreen(off, 0)
	1-out off
	@resoGrill(vn1 1 vn2 1 va 0.2, -20, 0)
	@simpleCurve(gmirror feedbk, 0.01, 0.20, 50) ; from here to m24...
	$spatReso := ::spat_teleport(3)
	@noiseRec(vn1 1)
NOTE Eb5 1/6 ;e2
NOTE 0 1/3
NOTE C#4 1/6 ;e3
NOTE B3 1/6 ;e4

NOTE 0 3/7
NOTE Gb5 1/7 ;e5
NOTE F3 1/7 ;e6
NOTE 0 2/7

NOTE D3 1/7 ;e7
NOTE Db4 1/7 ;e8
NOTE C4 1/7 ;e9
NOTE 0 3/7
NOTE G2 1/7 ;e10
4/7 input-sel 2 

NOTE A4 1/7
NOTE 0 1/7
NOTE G#3 1/7
NOTE 0 5/7
NOTE D3 1/6
NOTE G2 1/6 
NOTE 0 1/6

TRILL (G#3 D3) 1 ;m15
	1 input-sel 1
	@resoGrill(vn1 1, -20, 0)
	
NOTE C3 1/5 ;e1
NOTE F4 1/5 ;e2
NOTE A2 1/5 ;e3
NOTE Bb4 1/5 ;e4
NOTE Db5 1/5 ;e5
NOTE B2 1/5 ;e6
NOTE C#4 1/5 ;e7
NOTE 0 1/5
NOTE D#5 1/5 ;e8
NOTE E5 1/5 ;e9

NOTE E5 2 ;e9_2

antescofo::suivi 0

EVENT 10 m16-p
	input-sel 3	
	@resoGrill(vn1 1 vn2 1 va 1 vc 0.5, -20, 0)
	abort $spatReso
	$a[2] := -75
	::spat_goto(3, 180, 2, 10)
	$spatLoop := ::spat_circular(1, 3) ; start spinning loop
	@noiseStop
	@loopScreen
	curve playLoop 
		@action := {cursor $x
			mugran positionvar ($x/500), period 0 (1 + $x/10000), periodvar ($x/500), duration 0 (1 + $x/15000), durationvar 0 ($x/15000), resampling ($x/50000*(@rand_int(200)-100)), levelvar ($x / 5000)
			$d[0] := 1 - ($x / 15000)
		} 
		@grain := 0.01
		{
		$x {
			{0}
			15 {15000}
		}
	}


MULTI (D4 E6) 4 m18 
	antescofo::suivi 1
	@noiseStop
	@resoGrill(vn1 1 vn2 1 va 1 vc 1, -20, 0)
MULTI (E6 E5) 1
	::spat_goto(3, -100, 0.2, 0.7)
	input-sel 1
	antescofo::suivi 0

EVENT 5 m19-r
	@noiseRec(vn1 1 vn2 1 va 1)
	::spat_goto(3, -30, 1, 2.9)
	3 ::spat_goto(3, 0, 2, 1)
EVENT 10 m20-p
	@noiseStop
	@resoGrill(vn1 1 vn2 1 vc 1, -20, 0)
;	$spatRepel3 := ::spat_repelAttacks(3)
	$d[0] := 1
	@loopScreen
	curve playLoop 
		@action := {cursor $x
			mugran positionvar ($x/500), period 0 (1 + $x/10000), periodvar ($x/500), duration 0 (1 + $x/15000), durationvar 0 ($x/15000), resampling ($x/50000*(@rand_int(200)-100)), levelvar ($x / 5000)
			$d[2] := $x/2000
			$a[2] := $x/200
		} 
		@grain := 0.01
		{
		$x {
			{0}
			20 {10000}
		}
	}

EVENT 10 m22-r
	@noiseRec(vn1 1 vn2 1 va 1)
	::spat_goto(3, 135, 1.5, 10)
EVENT 5 m24-p
	@noiseStop	
	@resoGrill(vn1 1 vn2 1 va 1 vc 1, -20, 0)
	::spat_goto(3, 225, 1.5, 1)
	@loopScreen
	curve playLoop 
		@action := {cursor $x
		mugran positionvar ($x/500), period 0 (1 + $x/10000), periodvar ($x/500), duration 0 (1 + $x/15000), durationvar 0 ($x/15000), resampling ($x/50000*(@rand_int(200)-100)), levelvar ($x / 5000)} 
		@grain := 0.01
		{
		$x {
			{0}
			15 {15000}
		}
	}	
	$spatReso := ::spat_circular(3, -3)

EVENT 5 m25
	 ::spat_goto(3, 30, 2.5, 3)
	 @simpleCurve(gmirror feedbk, 0.2, 0.8, 5)


EVENT 5 m26
	@noiseStop	
	@resoGrill(vn1 1 vn2 1, -20, 0)
	::spat_goto(3, 0, 2, 4)

EVENT 5 m27-r
	@noiseRec(vn1 1 vn2 1 vc 1)
EVENT 10 m28-p
	@noiseStop	
	@resoGrill(vn1 1 vn2 1 va 1, -20, 0)
	@loopScreen
	curve playLoop 
		@action := {cursor $x
		mugran positionvar ($x/500), period 0 (1 + $x/10000), periodvar ($x/500), duration 0 (1 + $x/15000), durationvar 0 ($x/15000), resampling ($x/50000*(@rand_int(200)-100)), levelvar ($x / 5000)} 
		@grain := 0.01
		{
		$x {
			{0}
			10 {10000}
		}
	}


EVENT 10 m30
	abort $spatLoop
	abort $spatReso
	::spat_goto(1, 55, 2, 10)
	::spat_goto(3, 55, 2, 10)
	getfreq 1
	@doubler(va 2 vc 2.5, 0.15, 16000)
	@resoGrill(vn1 1 vn2 1, -20, 0)
	gmirror feedbk 0.1 
EVENT 5 m32
	input-sel 2
	@doubler(va 2 vn2 2, 2.1, 22000)
	::spat_goto(1, 35, 1.5, 1)
	::spat_goto(3, 35, 1.5, 1)
	1 @resoGrill(vn2 1 vc 1, -20, 0)
	1 ::spat_goto(3, 145, 1.5, 2)
	::spat_goto(1, 145, 1.5, 2)
EVENT 11 m33
	whenever MIRSPAT ($a[2]) {
		$a[0] := -$a[2]
	}
	@resoGrill(vn1 1 va 1 vc 0.5, -20, 0)
	::spat_goto(3, 145, 3, 1)
	1 ::spat_goto(3, 145, 1, 1)
	1 ::spat_goto(3, 145, 3, 1)
	2 ::spat_goto(3, 145, 1, 1)
	::spat_goto(3, 235, 2.5, 8)
EVENT 24 m35
	::spat_goto(3, 360, 1.5, 4)
	@doubler(vn1 1.2 vn2 2, 2.4, 22000)
	@resoGrill(va 1 vc 1, -20, 0)
	4 ::spat_goto(3, 0, 1.5, 0.1)
	2 ::spat_goto(3, 60, 1, 5)
	5 ::spat_goto(3, -60, 0.5, 5)
	5 ::spat_goto(3, 25, 2, 5)

EVENT 10 m40
	::spat_goto(3, 205, 1, 5)
	input-sel 3
	@doubler(vn1 2 vn2 2 va 1, 2.5, 22000)
	@resoGrill(va 0.5 vc 1, -20, 0)
EVENT 10 m42
	input-sel 1
	@resoGrill(vn1 1 vc 1, -20, 0)
	@doubler(vn2 2 va 1.5, 2.3, 20500)
	2 ::spat_goto(3, -45, 3, 1)
EVENT 27 m44
	input-sel 2
	::spat_goto(3, 30, 5, 2)
	@resoGrill(va 1 vc 1, -20, 0)
	@doubler(vn1 1.5 vn2 2, 2.1, 22000)
	10 ::spat_goto(3, 120, 5, 5)
EVENT 3 m49
	@doubler(vn1 2 vn2 2 va 1.5, 3, 20500)
	::spat_goto(3, 355, 2, 1)
	@noiseRec(vn1 1 vn2 1 va 1)
	@resoGrill(vc 1, -20, 0)
EVENT 5 m50
	@resoGrill(vn1 1 vn2 1 vc 1, -20, 0)
	@noiseStop
	@loopScreen
	curve playLoop 
		@action := {cursor $x
		mugran positionvar ($x/30), period 0 (1 + $x/10000), periodvar ($x/500), duration 0 (1 + $x/15000), durationvar 0 ($x/15000), resampling ($x/50000*(@rand_int(200)-100)), levelvar ($x / 5000)
			$a[2] := ($x/10 + @rand_int(30))
		} @grain := 0.01
		{
		$x {
			{0}
			5 {3000}
		}
	}
EVENT 15 m51
	::spat_goto(3, 120, 5, 1)
	@resoGrill(vn1 1 vn2 1 va 1 vc 1, -20, 0)
	7 @resoGrill(vn1 1 vn2 1 vc 1, -20, 0)
	::spat_goto(3, 270, 6, 1)
	@doubler(va 1, 0.5, 19500)
	1 @resoGrill(vn1 1 vn2 1, -20, 0)
	::spat_goto(3, 380, 6, 1)
	@doubler(va 1.5 vc 1, 0.45, 16500)
EVENT 10 m54
	input-sel 3
	::spat_goto(3, 166, 3, 1)
	@resoGrill(va 1 vc 0.4, -20, 0)
	@doubler(vn2 1.5 vc 2, 0.5, 19000)

EVENT 5 m56
	input-sel 1
	abort MIRSPAT
	@doubler(va 1.5, 0.75, 20000)
	@resoGrill(off, 0, 0)
	@mirror(vc 0.2)
	::spat_goto(1, 145, 1.5, 0.2)
	::spat_goto(2, 45, 1, 0.2)

EVENT 10 m57
	spat room 1 reverberance 90 ; restore reverberance
	@mirror(vn2 1 va 1 vc 1 vn1 1)
	@toneScreen(vn1 1, 0.88)
	::spat_goto(3, 30, 0.5, 5)

EVENT 16 m59
	@mirrorOff
	@resoScreen(vn1 1 vn2 1 va 1)
	@toneScreen(vc 1, 0.99)
	::spat_goto(2, 0, 4, 10)

EVENT 4 m62
	@mirror(vn2 1 va 1 vc 1 vn1 1)
	@toneScreen(vc 1 va 0.5, 0.99)
	::spat_goto(3, 0, 1, 3)
	10 ::spat_goto(3, 60, 0.15, 5)

EVENT 1 p1-end
	BPM 60 ; 1 beat = 1 second
	@start ; reset initial params
	input-gain 8 ; start is very quiet!!!
	input-sel 1 ; 1=vn1, 2=vn2, 3=va, 4=cl.

// ======= Part 2 =======

EVENT 15 P2-A
	$spatNoise := ::spat_radial(2)
	@noiseRec(vn2 2)
	4 @noiseStop
	@noiseScreen(vn1 2 vn2 1 va 2 vc 1, 0.97)
	curve 2-gain -30, 0.0	2.1
	$spatNoise := ::spat_spray(2)
	dmirror feedbk 0.9, grain_freq 18, max_delay 250
NOTE Bb3 3 A2
	antescofo::suivi 1
	$spatRepel2 := ::spat_repelAttacks(2)
NOTE A3 6
	print slide-down
TRILL (A3 G3) 3
	print irr
	3 input-sel 2	; vn2
	@toneScreen(vc 1, 0.97) ; resonate Cello
	curve 1-gain -30, 0.0	4
NOTE Ab4 1/2
	print up
NOTE G3 1/2
	print down
NOTE 0 1
NOTE A5	4
	print notehigh
TRILL (G6 D5 A3) 1
	print irr
	1 input-sel 1
NOTE A5 1
	print FL
NOTE G#5 3
	print delic
	antescofo::suivi 0

	input-gain 1
	1-gain 0
	
EVENT 70 B-swit
	spat room 1 size 1333	
	abort $spatNoise
	abort $spatRepel2
	$spatMirr := ::spat_cross(2)
	$spatReso := ::spat_cross(3)
	repel 2 0
	$a := [0, -90, 90]
	$d := [1, 2, 1]
	$a := $a
	enable_switch 1
	$switch_button := 1 ; start with mirror
	@mirror(vn1 1 vn2 1 va 1 vc 1)
	@resoGrill(vn1 1 vn2 1 va 1 vc 1, -15, -15) ; [s]witch MANUALLY between the two

	0.2 dmirror grains_on_off 1
	1-teeth off
	dmirror feedbk 0.07, grain_freq 19.7
	dmirror highpass 13400, lowpass 22000
	dmirror scrub_freq 0.66, max_delay 2000
	gmirror feedbk 0.2
	; scrub_freq is a measure of delay randomness. 
	; we start from a fairly low value (precise repeats) and vary it across the section

	curve DELAYS @Grain := 0.05s, @Action := {
		dmirror scrub_freq $sfr
		dmirror max_delay $md
	}
	{ $sfr, $md {
			{ 0.01, 200 }
		20	{ 0.66, 2000}
	}}

EVENT 70 C
	enable_switch 0
	$switch_button := 0
	@mirror(vn1 1 vn2 1 va 1 vc 1)
	@resoGrill(vn1 0.2 vn2 0.2 va 0.1, -20, -10)
	abort $spatMirr
	abort $spatReso
	$spatMirr := ::spat_circular(2, 1)
	whenever MIRSPAT ($a[1]) {
		$a[2] := -$a[1]
	}

	curve DELAYS @Grain := 0.05s, @Action := {
		dmirror scrub_freq $sfr
		dmirror max_delay $md
		$d[1] := ($sfr * 1.2)
	}
	{ $sfr, $md {
			{ 0.66, 2000}
		50	{ 0.01, 200 }
		20  { 5	  , 50 }
	}}

EVENT 70 D ; back to section A settings
	@noiseScreen(vn1 2 vn2 1 va 2 vc 1, 1.1)
	$spatNoise := ::spat_spray(2)
	dmirror feedbk 0.9, grain_freq 18, max_delay 250

EVENT 1 P2-end
	@start
	input-sel 4 ; 1=vn1, 2=vn2, 3=va, 4=cl.
	input-gain 1 
	getfreq 1

// ======= Part 3 =======

EVENT 25 P3-A

	$a[0] := 15; tone
	$d[0] := 0.7
	$a[1] := 0	; noise
	$d[1] := 0.5
	$a[2] := 0	; grill
	$d[2] := 0.2
	$a := $a

	curve granMirror @Grain := 0.05s, @Action := {gmirror feedbk $x, grain_freq $y}
	{ $x, $y {
			{ 0.9, 128 }
		8	{ 0.08, 99 }
		8	{ 0.05, 25 }
	}}

	@doubler(vn1 2 vn2 2 va 3, 0.5, 555)

	@noiseRec(va 2) ; TODO change to vc?
	@resoGrill(vn1 1 vn2 1 va 1 vc 0.5, -20, 0)	
	curve 1-gain -50, 0.0	3	; fade in Tone
	curve 3-gain -50, 0.0	3	; fade in Grill
	2 ::spat_goto(3, 60, 1, 9)
	2 @noiseStop
	@noiseScreen(vn1 1 vn2 1 va 1.5 vc 1, 2)
	//curve 2-gain -30, 0.0	2.1	; fade in Noise
	$spatNoise := ::spat_radial(2)
	$spatTone := ::spat_radial(1)
	::spat_goto(2, 160, 1, 10)
	5 $spatGrill := ::spat_spray(3)
	::spat_goto(3, -225, 2, 5)
	6 abort $spatNoise
	$spatNoise := ::spat_spray(2)
	::spat_goto(1, -40, 1, 10)
	::spat_goto(2, 180, 3, 10)
	::spat_goto(3, 180, 3.5, 10)


EVENT 39 P3B-gr

	@doubler(vn1 3 vn2 3 va 3 vc 2.5, 0.5, 600)
	$a[0] := 0 ; doubler
	$d[0] := 0.6
	$a := $a

	@noiseScreen(vn1 2 vn2 1 va 2 vc 1, 1.1)
;	$spatNoise := ::spat_spray(2)
	dmirror feedbk 0.9, grain_freq 18, max_delay 250

	@resoScreen(vn1 2 vn2 2)
	abort $spatTone
	repel 1 0
	$spatTone := ::spat_circle_walk(1, 3)


EVENT 10 P3-C
	input-sel 3
	spat room 1 reverberance 90
	spat room 1 size 2000
	abort $spatNoise
	abort $spatGrill
	abort $spatTone
	$spatNoise := ::spat_circle_walk(2, 1)
	@noiseScreen(off, 0)
	$a[0] := 15
	$d[2] := 0.5
	$d[1] := 1.6
	$d := $d
	@mirror(vn1 5 vn2 1 va 1)
	1	@mirror(vn1 1 vn2 1.2 va 1)

;	whenever MIRSPAT ($a[1]) {
;		$a[1] := -$a[2]
;	}
	::spat_goto(3, 55, 1, 10)
	getfreq 1
	@doubler(vn1 1 vn2 1 va 0.5 vc 2.5, 2, 16000)
	@resoGrill(vn1 1 vn2 1 va 0.5, -20, 0)
	0.1 dmirror feedbk 0.7, max_delay 166 
	gmirror feedbk 0.5

EVENT 10 P3-m8 
	::spat_goto(3, -40, 1, 5)
	@simpleCurve(gmirror feedbk, 0.5, 0.8, 5)

EVENT 5 P3m10
	::spat_goto(3, -200, 0.7, 3)
	@simpleCurve(dmirror feedbk, 0.7, 0.20, 5)

EVENT 11 P3m11
	::spat_goto(3, -155, 1, 4)

EVENT 9 P3m13
	::spat_goto(3, 15, 0.8, 1)

EVENT 25 P3m15 
	::spat_goto(3, 333, 2, 15)

EVENT 45 P3-D 

EVENT 155 P3-E

	1-gain 0
	3-gain 0
	spat room 1 size 1000
	spat room 1 reverberance 65	
	abort $spatNoise
	$a := [0, -90, 90]
	$d := [1, 1.5, 1]
	$a := $a

	@mirror(vn2 1 va 1)
	abort ENMIR
	@resoGrill(vn1 1 vc 1, -15, 0)

	$spatMirr := ::spat_circular(2, 1)
	$spatGrill := ::spat_spray(3)
	whenever MIRSPAT ($a[1]) {
		$a[2] := -$a[1]
	}

	curve DELAYS @Grain := 0.05s, @Action := {
		dmirror scrub_freq $sfr
		dmirror max_delay $md
		$d[1] := ($sfr * 1.2)
	}
	{ $sfr, $md {
			{ 0.66, 500}
		5	{ 0.01, 100 }
		5	{ 5	  , 50 }
	}} ;TODO spat & envelopes for more pages

EVENT 39 P3-F-gr

	abort DELAYS	
	@resoGrill(off, 0, 0)
	@doubler(vn1 3 vn2 3 va 3 vc 2.5, 0.5, 600)
	$a[0] := 0 ; doubler
	$d[0] := 0.6
	$a := $a

	@noiseScreen(vn1 2 vn2 1 va 2 vc 1, 1.1)
;	$spatNoise := ::spat_spray(2)
	dmirror feedbk 0.9, grain_freq 18, max_delay 250

	@resoScreen(vn1 2 vn2 2)
	abort $spatTone
	repel 1 0
	$spatTone := ::spat_circle_walk(1, 3)
