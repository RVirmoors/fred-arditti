// dynamic spat processes

@proc_def ::spat_circular($source, $start_a, $start_d, $dir) {
	@local $end_a, $end_d
	$end_a := $start_a + $dir * (1.1 - $periodicity) * 10
	$end_d := $start_d * (1 - $energy) * 1.5
	curve Spat_circ 
		@action := {spat source $source aed $a 0 $end_d} 
		@grain := 0.1
		{
		$a {
			{$start_a}
			1 {$end_a}
		}
	}
	1 ::spat_circular($source, $end_a, $start_d, $dir)
}

@proc_def ::spat_teleport($source, $a, $d) {
	whenever ($BEAT_POS) { // for each new event, teleport
		@local $end_a, $end_d
		$end_a := $a + @rand_int(270)
		$end_d := $d * (1 - $energy) * 1.5
		spat source $source aed $end_a 0 $end_d
	}
}

@proc_def ::spat_radial($source, $a, $d) {
	whenever ($energy) {
		spat source $source aed ($a + $periodicity * 45) 0 ($d * (1 - $energy))
	}
}

@proc_def ::spat_spray($source, $a, $d) {

}